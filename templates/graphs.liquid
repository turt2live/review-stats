<!DOCTYPE html>
<html>
    <head>
        <title>{{orgName}}/{{repoName}}</title>
        <link rel="stylesheet" href="../../../res/style.css" />
        <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300&display=swap" rel="stylesheet">
    </head>
    <body class='graphs'>
        <h1>{{orgName}}/{{repoName}} review stats ({{group}})</h1>
        <p>For team <code>{{teamName}}</code></p>

        {% if isComplete %}
        <h2>Review request queue size</h2>
        <p>Approximated for what the size would have been at the time.</p>
        <div class='canvas'>
            <canvas id="prQueue"></canvas>
        </div>
        {% endif %}

        <h2>Volume of PRs put up for review</h2>
        <p>Organized by the week in which review was first requested.</p>
        <div class='canvas'>
            <canvas id="prVolume"></canvas>
        </div>


        <h2>Days between opening and first review request</h2>
        <p>Organized by the week in which review was first requested.</p>
        <div class='canvas'>
            <canvas id="openToReviewRequest"></canvas>
        </div>


        <h2>Days between the first review request and first review</h2>
        <p>Organized by the week in which review was first requested.</p>
        <div class='canvas'>
            <canvas id="firstReview"></canvas>
        </div>


        <h2>Days between the first review request and first approving review</h2>
        <p>Organized by the week in which review was first requested.</p>
        <div class='canvas'>
            <canvas id="approvingReview"></canvas>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/luxon@1.26.0"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.1/dist/chart.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js" integrity="sha512-qTXRIMyZIFb8iQcfjXWCO8+M5Tbc38Qi5WzdPOYZHIlZpzBHG3L3by84BBBOiRGiEb7KKtAOAs5qYdUiZiQNNQ==" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0"></script>
        <script src="https://www.chartjs.org/chartjs-chart-financial/chartjs-chart-financial.js"></script>

        <script type="text/javascript">const byWeekData = {{rawData}};</script>

        <script type="text/javascript">
        const orderedWeeks = Object.keys(byWeekData).map(w => moment(w)).sort((a, b) => a - b).map(w => w.format('YYYY-MM-DD'));

        const maxOpts = {
            label: 'Maximum time',
            borderColor: '#e76f51',
            backgroundColor: '#e76f51',
            fill: false,
        };
        const minOpts = {
            label: 'Minimum time',
            borderColor: '#2a9d8f',
            backgroundColor: '#2a9d8f',
            fill: false,
        };
        const avgOpts = {
            label: 'Average time',
            borderColor: '#3d405b',
            backgroundColor: '#3d405b',
            fill: false,
        };

        const chartOpts = {
            legend: {
                position: 'bottom',
            },
            tooltips: {
                mode: "x",
            },
            scales: {
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Week',
                    },
                    ticks: {
                        autoSkip: true,
                        maxRotation: 50,
                        minRotation: 50,
                    },
                }],
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Days',
                    },
                    ticks: {
                        beginAtZero: true,
                    }
                }],
            },
        };

        const queueEl = document.getElementById("prQueue");
        if (queueEl) {
            const queueCtx = queueEl.getContext('2d');
            const queueChart = new Chart(queueCtx, {
                type: 'candlestick',
                data: {
                    labels: orderedWeeks,
                    datasets: [{
                        data: orderedWeeks.map(w => {
                            const prWeeks = byWeekData[w].queueSize;
                            let open = 0;
                            let close = 0;
                            let max = Number.MIN_VALUE;
                            let min = Number.MAX_VALUE;
                            for (let i = 0; i < 7; i++) {
                                let c = 0;
                                for (const week of prWeeks) {
                                    const v = week[i];
                                    if (v === null) continue;
                                    if (v >= 0) {
                                        c++;
                                    } else {
                                        c--;
                                    }
                                }
                                if (i === 0) open = c;
                                if (i === 6) close = c;
                                max = Math.max(max, c);
                                min = Math.min(min, c);
                            }
                            return {x: luxon.DateTime.fromFormat(w, "yyyy-LL-dd").valueOf(), o: open, c: close, h: max, l: min};
                        }),
                        label: '# of PRs',
                        color: {
                            up: '#d84343',
                            down: '#7cd843',
                            unchanged: '#999'
                        },
                    }],
                },
                options: {
                    ...chartOpts,
                    scales: {
                        yAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: 'Number of PRs',
                            },
                            ticks: {
                                beginAtZero: true,
                            }
                        }]
                    },
                    plugins: {
                        tooltip: {
                            enabled: true,
                            callbacks: {
                                label: (item, obj) => {
                                    const point = item.raw;
                                    let diff = point.c - point.o;
                                    if (diff === 0) {
                                        diff = "+/- 0";
                                    } else if (diff > 0) {
                                        diff = "+" + diff;
                                    }
                                    return [
                                        "Start of week: " + point.o,
                                        "End of week: " + point.c + " (" + diff + ")",
                                        "Max for week: " + point.h,
                                        "Min for week: " + point.l,
                                    ];
                                },
                                title: (items, obj) => {
                                    return "Week of " + luxon.DateTime.fromMillis(items[0].raw.x).toFormat('LLL dd, yyyy');
                                },
                            }
                        }
                    }
                },
            })
        }

        const volCtx = document.getElementById("prVolume").getContext('2d');
        const volChart = new Chart(volCtx, {
            type: 'line',
            data: {
                labels: orderedWeeks,
                datasets: [{
                    data: orderedWeeks.map(w => byWeekData[w].openToReviewRequest.length),
                    ...avgOpts, // steal colours
                    label: '# of PRs',
                }],
            },
            options: {
                ...chartOpts,
                scales: {
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Number of PRs',
                        },
                        ticks: {
                            beginAtZero: true,
                        }
                    }]
                }
            },
        });

        const openCtx = document.getElementById("openToReviewRequest").getContext('2d');
        const openChart = new Chart(openCtx, {
            type: 'line',
            data: {
                labels: orderedWeeks,
                datasets: [{
                    data: orderedWeeks.map(w => Math.max(...byWeekData[w].openToReviewRequest)),
                    ...maxOpts,
                },{
                    data: orderedWeeks.map(w => Math.min(...byWeekData[w].openToReviewRequest)),
                    ...minOpts,
                },{
                    data: orderedWeeks.map(w => byWeekData[w].openToReviewRequest.reduce((s, c) => s + c, 0) / byWeekData[w].openToReviewRequest.length),
                    ...avgOpts,
                }],
            },
            options: chartOpts,
        });

        const firstCtx = document.getElementById("firstReview").getContext('2d');
        const firstChart = new Chart(firstCtx, {
            type: 'line',
            data: {
                labels: orderedWeeks,
                datasets: [{
                    data: orderedWeeks.map(w => Math.max(...byWeekData[w].reviewRequestToFirst)),
                    ...maxOpts,
                },{
                    data: orderedWeeks.map(w => Math.min(...byWeekData[w].reviewRequestToFirst)),
                    ...minOpts,
                },{
                    data: orderedWeeks.map(w => byWeekData[w].reviewRequestToFirst.reduce((s, c) => s + c, 0) / byWeekData[w].reviewRequestToFirst.length),
                    ...avgOpts,
                }],
            },
            options: chartOpts,
        });

        const approvedCtx = document.getElementById("approvingReview").getContext('2d');
        const approvedChart = new Chart(approvedCtx, {
            type: 'line',
            data: {
                labels: orderedWeeks,
                datasets: [{
                    data: orderedWeeks.map(w => Math.max(...byWeekData[w].reviewRequestToApproved)),
                    ...maxOpts,
                },{
                    data: orderedWeeks.map(w => Math.min(...byWeekData[w].reviewRequestToApproved)),
                    ...minOpts,
                },{
                    data: orderedWeeks.map(w => byWeekData[w].reviewRequestToApproved.reduce((s, c) => s + c, 0) / byWeekData[w].reviewRequestToApproved.length),
                    ...avgOpts,
                }],
            },
            options: chartOpts,
        });

        </script>
    </body>
</html>
